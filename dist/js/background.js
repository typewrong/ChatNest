const d=()=>new Promise((t,e)=>{const o=indexedDB.open("ChatNestDB",1);o.onerror=n=>{console.error("数据库打开失败:",n),e(n)},o.onsuccess=n=>{console.log("数据库连接成功"),t(n.target.result)},o.onupgradeneeded=n=>{const c=n.target.result;if(!c.objectStoreNames.contains("conversations")){const a=c.createObjectStore("conversations",{keyPath:"id"});a.createIndex("platform","platform",{unique:!1}),a.createIndex("timestamp","timestamp",{unique:!1}),console.log("创建对话记录存储成功")}}}),y=()=>new Promise((t,e)=>{chrome.storage.sync.get("conversationIndex",o=>{if(chrome.runtime.lastError){e(chrome.runtime.lastError);return}const n=o.conversationIndex||[];t(n)})}),f=t=>new Promise((e,o)=>{const c=t.length>100?t.slice(0,100):t;chrome.storage.sync.set({conversationIndex:c},()=>{if(chrome.runtime.lastError){o(chrome.runtime.lastError);return}e()})}),I=async t=>{try{const e=await d();return new Promise((o,n)=>{const r=e.transaction(["conversations"],"readonly").objectStore("conversations").get(t);r.onsuccess=s=>{const l=s.target.result;if(!l){n(new Error("对话不存在"));return}o(l)},r.onerror=s=>{n(s)}})}catch(e){throw console.error("获取对话失败:",e),e}},p=async()=>{try{const t=await d();return new Promise((e,o)=>{const a=t.transaction(["conversations"],"readonly").objectStore("conversations").getAll();a.onsuccess=r=>{const s=r.target.result;e(s)},a.onerror=r=>{o(r)}})}catch(t){throw console.error("获取所有对话失败:",t),t}},C=async t=>{try{const e=await d();return new Promise((o,n)=>{const s=e.transaction(["conversations"],"readonly").objectStore("conversations").index("platform").getAll(t);s.onsuccess=l=>{const i=l.target.result;o(i)},s.onerror=l=>{n(l)}})}catch(e){throw console.error(`获取${t}对话失败:`,e),e}},S=async t=>{try{const e=await d();return new Promise((o,n)=>{const r=e.transaction(["conversations"],"readwrite").objectStore("conversations").delete(t);r.onsuccess=()=>{y().then(s=>{const l=s.filter(i=>i.id!==t);f(l).then(()=>o()).catch(i=>n(i))}).catch(s=>n(s))},r.onerror=s=>{n(s)}})}catch(e){throw console.error("删除对话失败:",e),e}},v=t=>{if(!t||!t.messages||!Array.isArray(t.messages))return"# 无效的对话数据";let e=`# ${t.title||"未命名对话"}

`;return e+=`- 平台: ${t.platform==="deepseek"?"DeepSeek":"豆包"}
`,e+=`- 时间: ${new Date(t.timestamp).toLocaleString("zh-CN")}
`,e+=`- 链接: ${t.url||"无链接"}

`,e+=`---

`,t.messages.forEach(o=>{const n=o.role==="user"?"**用户**":"**AI**";e+=`## ${n}

${o.content}

`}),e},b=async t=>{try{const e=[];for(const o of t)try{const n=await I(o),c=v(n);e.push({id:n.id,title:n.title,markdown:c})}catch(n){console.error(`导出对话${o}失败:`,n)}return e}catch(e){throw console.error("导出对话列表失败:",e),e}},m=async t=>{try{const e=await d();return new Promise((o,n)=>{const a=e.transaction(["conversations"],"readwrite").objectStore("conversations"),r=a.get(t.id);r.onsuccess=s=>{if(s.target.result){const i=a.put(t);i.onsuccess=()=>{w(t,!0).then(()=>o()).catch(u=>n(u))},i.onerror=u=>{n(u)}}else{const i=a.add(t);i.onsuccess=()=>{w(t,!1).then(()=>o()).catch(u=>n(u))},i.onerror=u=>{n(u)}}},r.onerror=s=>{n(s)}})}catch(e){throw console.error("保存对话失败:",e),e}},w=async(t,e)=>{try{console.log("开始更新对话元数据:",t.id);const o=await y();console.log("当前元数据索引长度:",o.length,"索引内容:",JSON.stringify(o));const n={id:t.id,platform:t.platform,title:t.title,timestamp:t.timestamp,url:t.url};if(!Array.isArray(o)){console.error("元数据索引不是数组，重置为空数组"),await f([n]),console.log("元数据索引已重置并添加新元数据");return}let c=o.filter(s=>s&&typeof s=="object"&&s.id);if(console.log("有效元数据数量:",c.length),e){const s=c.findIndex(l=>l&&l.id===t.id);s!==-1?(c[s]=n,console.log("更新现有元数据:",s)):(c.push(n),console.log("在更新模式下添加新元数据"))}else{const s=c.findIndex(l=>l&&l.id===t.id);s!==-1?(c[s]=n,console.log("更新已存在的元数据:",s)):(c.push(n),console.log("添加新元数据"))}const a=c.filter((s,l,i)=>!s||!s.id?!1:i.findIndex(u=>u&&u.id===s.id)===l);a.sort((s,l)=>l.timestamp-s.timestamp),console.log("更新后的元数据索引长度:",a.length);const r=a.map(s=>({id:s.id,platform:s.platform||"unknown",title:s.title||"未命名对话",timestamp:s.timestamp||Date.now(),url:s.url||""}));await f(r),console.log("元数据更新成功")}catch(o){throw console.error("更新对话元数据失败:",o),o}},g=(t,e)=>{console.error("运行时错误:",t);try{const o={timestamp:Date.now(),error:t.toString(),sender:e?e.url:"unknown"};let n=JSON.parse(localStorage.getItem("chatnest_error_logs")||"[]");n.push(o),n.length>50&&(n=n.slice(-50)),localStorage.setItem("chatnest_error_logs",JSON.stringify(n))}catch(o){console.error("无法记录错误:",o)}},x=async()=>{try{console.log("检查是否有需要恢复的临时对话..."),chrome.storage.local.get(null,async t=>{const e=Object.keys(t).filter(o=>o.startsWith("chatnest_temp_"));if(e.length===0){console.log("没有找到需要恢复的临时对话");return}console.log(`找到${e.length}个临时保存的对话，尝试恢复...`);for(const o of e)try{const n=t[o];await m(n),console.log(`恢复对话成功: ${n.id}`),chrome.storage.local.remove(o,()=>{console.log(`临时存储已删除: ${o}`)})}catch(n){console.error(`恢复对话失败 (${o}):`,n)}})}catch(t){console.error("恢复临时对话过程中出错:",t)}};chrome.runtime.onStartup.addListener(()=>{console.log("扩展启动，尝试恢复临时对话..."),x()});chrome.runtime.onInstalled.addListener(()=>{console.log("扩展已安装或更新，尝试恢复临时对话..."),x()});const h=t=>{{console.log(`[ChatNest Background] ${t}`);const o=`${new Date().toISOString()}: ${t}`;chrome.storage.local.get("debug_logs",n=>{let c=n.debug_logs||[];c.push(o),c.length>100&&(c=c.slice(-100)),chrome.storage.local.set({debug_logs:c})})}};chrome.runtime.onMessage.addListener((t,e,o)=>{var n,c,a;if(h(`收到消息: ${JSON.stringify(t)}`),t.type==="SAVE_CONVERSATION"){try{m(t.data),o({success:!0})}catch(r){console.error("保存对话失败:",r),g(r,e),o({success:!1,error:r.message})}return!1}if(t.action==="saveConversation")try{m(t.conversation),o({success:!0})}catch(r){console.error("保存对话失败:",r),g(r,e),o({success:!1,error:r.message})}else{if(t.action==="getAllConversations")return h("处理获取全部对话请求"),p().then(r=>{console.log("获取到全部对话:",r),o({success:!0,conversations:r})}).catch(r=>{console.error("获取全部对话失败:",r),g(r,e),o({success:!1,error:r.message})}),!0;if(t.action==="getConversationsByPlatform")return h(`处理获取平台对话请求: ${t.platform}`),C(t.platform).then(r=>{console.log("获取到平台对话:",r),o({success:!0,conversations:r})}).catch(r=>{console.error(`获取平台对话失败: ${t.platform}`,r),g(r,e),o({success:!1,error:r.message})}),!0;if(t.action==="getConversation"){const r=t.id;return r?(I(r).then(s=>{console.log("获取到对话:",s),o({success:!0,conversation:s})}).catch(s=>{console.error("获取对话失败:",s),g(s,e),o({success:!1,error:s.message})}),!0):(o({success:!1,error:"未提供对话ID"}),!1)}else if(t.action==="deleteConversation"){const r=t.id;return r?(S(r).then(()=>{console.log("删除对话成功:",r),o({success:!0})}).catch(s=>{console.error("删除对话失败:",s),g(s,e),o({success:!1,error:s.message})}),!0):(o({success:!1,error:"未提供对话ID"}),!1)}else if(t.action==="conversationToMarkdown")try{const r=v(t.conversation);o({success:!0,markdown:r})}catch(r){console.error("转换为Markdown失败:",r),g(r,e),o({success:!1,error:r.message})}else{if(t.type==="GET_CONVERSATION_INDEX")return h("处理获取对话索引请求"),y().then(r=>{console.log("获取到对话索引:",r),o({success:!0,data:r})}).catch(r=>{console.error("获取对话索引失败:",r),g(r,e),o({success:!1,error:r.message})}),!0;if(t.type==="EXPORT_CONVERSATIONS")return h(`处理导出对话请求: ${((c=(n=t.data)==null?void 0:n.conversations)==null?void 0:c.length)||0}个对话`),b(((a=t.data)==null?void 0:a.conversations)||[]).then(r=>{console.log("导出对话成功:",r),o({success:!0,data:r})}).catch(r=>{console.error("导出对话失败:",r),g(r,e),o({success:!1,error:r.message})}),!0;console.warn("未知消息类型:",t),o({success:!1,error:"未知消息类型"})}}return!0});
